/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpc.gcp.AffinityConfig', null, global);
goog.exportSymbol('proto.grpc.gcp.AffinityConfig.Command', null, global);
goog.exportSymbol('proto.grpc.gcp.ApiConfig', null, global);
goog.exportSymbol('proto.grpc.gcp.ChannelPoolConfig', null, global);
goog.exportSymbol('proto.grpc.gcp.MethodConfig', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.gcp.ApiConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.grpc.gcp.ApiConfig.repeatedFields_, null);
};
goog.inherits(proto.grpc.gcp.ApiConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.gcp.ApiConfig.displayName = 'proto.grpc.gcp.ApiConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.gcp.ApiConfig.repeatedFields_ = [1001];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.gcp.ApiConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.gcp.ApiConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.gcp.ApiConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.ApiConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelPool: (f = msg.getChannelPool()) && proto.grpc.gcp.ChannelPoolConfig.toObject(includeInstance, f),
    methodList: jspb.Message.toObjectList(msg.getMethodList(),
    proto.grpc.gcp.MethodConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.gcp.ApiConfig}
 */
proto.grpc.gcp.ApiConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.gcp.ApiConfig;
  return proto.grpc.gcp.ApiConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.gcp.ApiConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.gcp.ApiConfig}
 */
proto.grpc.gcp.ApiConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.grpc.gcp.ChannelPoolConfig;
      reader.readMessage(value,proto.grpc.gcp.ChannelPoolConfig.deserializeBinaryFromReader);
      msg.setChannelPool(value);
      break;
    case 1001:
      var value = new proto.grpc.gcp.MethodConfig;
      reader.readMessage(value,proto.grpc.gcp.MethodConfig.deserializeBinaryFromReader);
      msg.addMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.gcp.ApiConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.gcp.ApiConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.gcp.ApiConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.ApiConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelPool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.gcp.ChannelPoolConfig.serializeBinaryToWriter
    );
  }
  f = message.getMethodList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1001,
      f,
      proto.grpc.gcp.MethodConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChannelPoolConfig channel_pool = 2;
 * @return {?proto.grpc.gcp.ChannelPoolConfig}
 */
proto.grpc.gcp.ApiConfig.prototype.getChannelPool = function() {
  return /** @type{?proto.grpc.gcp.ChannelPoolConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.gcp.ChannelPoolConfig, 2));
};


/** @param {?proto.grpc.gcp.ChannelPoolConfig|undefined} value */
proto.grpc.gcp.ApiConfig.prototype.setChannelPool = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.gcp.ApiConfig.prototype.clearChannelPool = function() {
  this.setChannelPool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.gcp.ApiConfig.prototype.hasChannelPool = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MethodConfig method = 1001;
 * @return {!Array.<!proto.grpc.gcp.MethodConfig>}
 */
proto.grpc.gcp.ApiConfig.prototype.getMethodList = function() {
  return /** @type{!Array.<!proto.grpc.gcp.MethodConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.gcp.MethodConfig, 1001));
};


/** @param {!Array.<!proto.grpc.gcp.MethodConfig>} value */
proto.grpc.gcp.ApiConfig.prototype.setMethodList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1001, value);
};


/**
 * @param {!proto.grpc.gcp.MethodConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.gcp.MethodConfig}
 */
proto.grpc.gcp.ApiConfig.prototype.addMethod = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1001, opt_value, proto.grpc.gcp.MethodConfig, opt_index);
};


proto.grpc.gcp.ApiConfig.prototype.clearMethodList = function() {
  this.setMethodList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.gcp.ChannelPoolConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.gcp.ChannelPoolConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.gcp.ChannelPoolConfig.displayName = 'proto.grpc.gcp.ChannelPoolConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.gcp.ChannelPoolConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.gcp.ChannelPoolConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.gcp.ChannelPoolConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.ChannelPoolConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    idleTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxConcurrentStreamsLowWatermark: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.gcp.ChannelPoolConfig}
 */
proto.grpc.gcp.ChannelPoolConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.gcp.ChannelPoolConfig;
  return proto.grpc.gcp.ChannelPoolConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.gcp.ChannelPoolConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.gcp.ChannelPoolConfig}
 */
proto.grpc.gcp.ChannelPoolConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIdleTimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxConcurrentStreamsLowWatermark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.gcp.ChannelPoolConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.gcp.ChannelPoolConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.gcp.ChannelPoolConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.ChannelPoolConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxSize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIdleTimeout();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMaxConcurrentStreamsLowWatermark();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 max_size = 1;
 * @return {number}
 */
proto.grpc.gcp.ChannelPoolConfig.prototype.getMaxSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.gcp.ChannelPoolConfig.prototype.setMaxSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 idle_timeout = 2;
 * @return {number}
 */
proto.grpc.gcp.ChannelPoolConfig.prototype.getIdleTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.gcp.ChannelPoolConfig.prototype.setIdleTimeout = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 max_concurrent_streams_low_watermark = 3;
 * @return {number}
 */
proto.grpc.gcp.ChannelPoolConfig.prototype.getMaxConcurrentStreamsLowWatermark = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.gcp.ChannelPoolConfig.prototype.setMaxConcurrentStreamsLowWatermark = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.gcp.MethodConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, proto.grpc.gcp.MethodConfig.repeatedFields_, null);
};
goog.inherits(proto.grpc.gcp.MethodConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.gcp.MethodConfig.displayName = 'proto.grpc.gcp.MethodConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.gcp.MethodConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.gcp.MethodConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.gcp.MethodConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.gcp.MethodConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.MethodConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    nameList: jspb.Message.getRepeatedField(msg, 1),
    affinity: (f = msg.getAffinity()) && proto.grpc.gcp.AffinityConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.gcp.MethodConfig}
 */
proto.grpc.gcp.MethodConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.gcp.MethodConfig;
  return proto.grpc.gcp.MethodConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.gcp.MethodConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.gcp.MethodConfig}
 */
proto.grpc.gcp.MethodConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addName(value);
      break;
    case 1001:
      var value = new proto.grpc.gcp.AffinityConfig;
      reader.readMessage(value,proto.grpc.gcp.AffinityConfig.deserializeBinaryFromReader);
      msg.setAffinity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.gcp.MethodConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.gcp.MethodConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.gcp.MethodConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.MethodConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAffinity();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.grpc.gcp.AffinityConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string name = 1;
 * @return {!Array.<string>}
 */
proto.grpc.gcp.MethodConfig.prototype.getNameList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.grpc.gcp.MethodConfig.prototype.setNameList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.grpc.gcp.MethodConfig.prototype.addName = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.grpc.gcp.MethodConfig.prototype.clearNameList = function() {
  this.setNameList([]);
};


/**
 * optional AffinityConfig affinity = 1001;
 * @return {?proto.grpc.gcp.AffinityConfig}
 */
proto.grpc.gcp.MethodConfig.prototype.getAffinity = function() {
  return /** @type{?proto.grpc.gcp.AffinityConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.gcp.AffinityConfig, 1001));
};


/** @param {?proto.grpc.gcp.AffinityConfig|undefined} value */
proto.grpc.gcp.MethodConfig.prototype.setAffinity = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.grpc.gcp.MethodConfig.prototype.clearAffinity = function() {
  this.setAffinity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.gcp.MethodConfig.prototype.hasAffinity = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.gcp.AffinityConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.gcp.AffinityConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.gcp.AffinityConfig.displayName = 'proto.grpc.gcp.AffinityConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.gcp.AffinityConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.gcp.AffinityConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.gcp.AffinityConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.AffinityConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 2, 0),
    affinityKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.gcp.AffinityConfig}
 */
proto.grpc.gcp.AffinityConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.gcp.AffinityConfig;
  return proto.grpc.gcp.AffinityConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.gcp.AffinityConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.gcp.AffinityConfig}
 */
proto.grpc.gcp.AffinityConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.grpc.gcp.AffinityConfig.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAffinityKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.gcp.AffinityConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.gcp.AffinityConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.gcp.AffinityConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grpc.gcp.AffinityConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAffinityKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.grpc.gcp.AffinityConfig.Command = {
  BOUND: 0,
  BIND: 1,
  UNBIND: 2
};

/**
 * optional Command command = 2;
 * @return {!proto.grpc.gcp.AffinityConfig.Command}
 */
proto.grpc.gcp.AffinityConfig.prototype.getCommand = function() {
  return /** @type {!proto.grpc.gcp.AffinityConfig.Command} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.grpc.gcp.AffinityConfig.Command} value */
proto.grpc.gcp.AffinityConfig.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string affinity_key = 3;
 * @return {string}
 */
proto.grpc.gcp.AffinityConfig.prototype.getAffinityKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.grpc.gcp.AffinityConfig.prototype.setAffinityKey = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, proto.grpc.gcp);
